#-------------------提示-------------------

# 本程序支持零配置启动，下面配置均为程序中 @ZConfigurationProperties 类的默认值，写在这里仅为展示配置项
# 新工程引入本程序的依赖后，可以不在本配置文件内写任何内容即可使用默认值启动.
# 如需自定义配置项，在本文件中覆盖掉即可
# 如：设定redis.host=192.168.1.15

# [支持热更新] 意为：程序在运行中，直接修改本配置文件中的值，保存以后就自动在程序中更新为新值，不需要重启程序。
# 但是配置值校验不通过时会重置为旧值，如 server.client.qps=ABC 会出现异常，然后重置为旧值。

# ServerConfigurationProperties 
# -------------------服务器相关配置-------------------

# http服务器监听的端口号
# 默认值：80,支持范围：1-65535
server.port=80

# 对于http请求，是否响应 ZSESSIONID 的Cookie，
# 默认值：true
# 支持热更新
server.response.z.session.id=true

# http响应头中的 Server字段值
# 默认值：ZServer
server.name=ZServer

# 读取http请求时分配的ByteBuffer初始大小，单位：字节
# 默认值：2048,支持范围：100-10240
server.byte.buffer.size=2048

# nio 读取http请求的body时,socketChannel.read()方法一直返回0时的等待超时毫秒数
# 默认值：500，支持范围：1 - 1000 * 60
server.nio.read.timeout=500

# 限制上传文件的最大KB数
# 默认值：1024 * 50,支持范围：1 - 1024 * 1000位
server.upload.file.size=51200

# 上传文件时从[一次性读取内存]改为[边读边写入到临时文件]的阈值,单位：KB,
# 默认值：1024 * 50,支持范围：100 - 1024 * 100
server.upload.file.to.temp.size=1024

# 上传文件时存放临时文件的目录
# 默认值：默认为[user.dir]下的temp目录
server.upload.temp.dir=

# 处理http请求的最大线程数量
# 默认值：Runtime.getRuntime().availableProcessors() * 4,支持范围：1 - 2000
server.thread.Count=48

# 处理http请求的线程的名称前缀，生成的线程以此为前缀分别命名为1、2、3以此类推
# 默认值：http-Thread-
server.thread.name=http-Thread-

# 对于程序中resources目录下的静态资源是否启动缓存，
# 默认值：true
# 支持热更新
server.static.resource.cache.enable=true

# 程序启动时扫描的包，配置为顶级包名，
# 默认值：com.vo(即本程序的顶级包名)
server.scan.package=com.vo

# 是否启动服务器QPS[server.qps]限制，
# 默认值：true
# 支持热更新
server.qps.limit.enabled=true

# 服务器QPS最大值限制，
# 默认值：10000 * 10,支持范围：0 - 10000 * 100
# 注意：此值最小支持0，配置为0表示不接受任何请求
# 支持热更新
server.qps=100000

# 请求超过[server.qps]时给客户端的提示语，默认值：访问频繁，请稍后再试
# 支持热更新
server.qps.exceed.message=访问频繁,请稍后再试

# 当前待处理的请求数最大值限制，来新请求时如果当前待处理请求数已经达到此值，则拒绝本次请求并返回错误码
# 默认值：100,支持范围：52 - 10000 * 1
server.pending.tasks=100

# 请求超过 [server.pending.tasks] 配置值时给客户端的提示信息
# 支持热更新
server.pending.tasks.exceed.message=待处理请求队列已满，请稍后再试

# 对于请求的响应模式
# 支持选项 @see TaskResponsiveModeEnum
# QUEUE　：　队列模式，放入上面配置的[server.thread.count]配置的http线程池中的任务队列中等待处理。
# IMMEDIATELY ： 立即响应，使用当前空闲线程来立即处理请求，如有空闲的则正常执行；
# 无空闲的则重新放入待处理队列等待后续空闲线程，知道超过[server.task.timeout.milliseconds]配置值时给客户端提示信息
# 默认值：QUEUE
server.task.responsive.mode=QUEUE

# 从服务器接收到请求的时间点开始，到处理本次请求的时间点截止，超过此值就返回【服务器忙】的信息。单位：毫秒
# 注意：仅 taskResponsiveMode=IMMEDIATELY 时，本配置项才生效
# 默认值：100,支持范围：1 - 1000 * 100
# 支持热更新
server.task.timeout.milliseconds=100

# 是否启用对一个client的qps限制
# 默认值：true
# 支持热更新
server.enable.client.qps=true

# 对于同一个客户端的QPS限制，
# 当前程序中暂定为ip和User-Agent相同就认为是同一个客户端，
# 如需自定义[如何判定为同一个客户端]可覆盖RequestValidatorAdapter中相关方法
# 默认值：5000,支持范围：10 - 10000 * 20
# 支持热更新
server.client.qps=5000


# 对于同一个ZSESSIONID的QPS限制
# 注意：仅当 [server.response.z.session.id]配置为true时本配置项才生效
# 默认值：1000,支持范围：10 - 10000 * 20
# 支持热更新
server.session.id.qps=1000

# 是否启用内置的 StaticController
# 如果配置为false，则是不需要处理静态文件(resources目录下的静态文件/[server.static.path]配置的路径的静态文件)
# 或者是自定义了处理静态文件的 Controller
# 默认值：true
server.static.controller.enable=true

# 对于长连接的超时时间，超过此值，服务器会关闭连接对象，单位：秒
# 默认值：600（10分钟）,支持范围：1 - 86400
server.keep.alive.timeout=600

# session存储方式，支持方式见 ZSessionStorageTypeEnum枚举，默认值：MEMORY
# 下面注释掉，因为本文件还不支持使用代码方式配置
# server.session.storage.type=ZSessionStorageTypeEnum.MEMORY.name()
server.session.storage.type=MEMORY

# session超时秒数，超时此值服务器则会销毁session，单位：秒
# 默认值：1800（30分钟）,支持范围：1 - Integer.MAX_VALUE
# 支持热更新
server.session.timeout=1800

# 配置读取硬盘上的静态资源的目录，
# 注意：此值优先于 [server.static.prefix]，配置了此值，则会
# 从硬盘上读取静态资源，而不使用 [server.static.prefix]配置值
# 默认值：空，即不从硬盘读取静态资源。
server.static.path=

# 配置 resources目录下的静态资源资源目录
# 即读取目录前缀为 resources/static/
# 默认值：/static
server.static.prefix=/static


# 对于http响应的body，是否启用压缩
# 默认值：true
server.compression.enable=true

# 对于http响应的哪些Content-Type启用压缩，如需配置多个用【,】分开。
# 注意：此值配置只有在 server.compression.enable=true 时才有效
# 默认值：text/html,text/xml,text/csv,text/css,text/plain,text/javascript,application/json,application/xml,application/javascript,image/svg+xml,font/woff2,font/woff,font/otf,font/ttf
server.compression.types=text/html,text/xml,text/csv,text/css,text/plain,text/javascript,application/json,application/xml,application/javascript,image/svg+xml,font/woff2,font/woff,font/otf,font/ttf

# 当 server.compression.enable=true 时，server.gzip.types资源文件大于多少KB才启用压缩
# 单位：KB，默认值：1
server.compression.min.length=1

# 自定义响应头，默认值：空
# 如：解决CORS问题，配置如下：
# server.responseHeaders.Access-Control-Allow-Origin=*
# 如需配置多个，可如下配置
# server.response.headers.a=A
# server.response.headers.b=B
# server.response.headers.c=C
server.response.headers=

# 程序启动时是否打印 @ZConfigurationProperties 的类
# 注意：如配置信息有敏感信息，则设置为false
# 默认值：false
server.print.configuration.properties=false

# ZApplicationEventConfigurationProperties 
# -------------------事件发布机制相关配置-------------------

# 处理事件请求的最大线程数量
# 默认值：Math.min(10, Runtime.getRuntime().availableProcessors()) 支持范围：1 - 100
application.event.thread.count=10

# 处理事件请求的线程名称前缀
# 默认值：applicationEvent-Thread-
application.event.thread.name.prefix=applicationEvent-Thread-

# ZCacheConfigurationProperties 
# -------------------缓存机制相关配置-------------------

# 内置的缓存的实现方式
# 默认值：MEMORY,支持范围：MEMORY、REDIS、MIXED
cache.type=MEMORY

# 是否启动内置的缓存功能
# 默认值：true
cache.enable=true

# ZMixConfigurationProperties 
# -------------------MIXED缓存实现的相关配置-------------------

# MIXED模式下，缓存内容再内存中过期时间，单位：毫秒
# 默认值：50,支持范围：1 - Byte.MAX_VALUE
cache.type.mix.memory.expire=50

# ZRedisConfigurationProperties 
# -------------------Redis的相关配置-------------------
# 注意：内置缓存配置为 MIXED和REDIS 时，需要使用到redis
# 此配置类配置的Redis使用方式如下：

# try (Jedis jedis = ZContext.getBean(JedisPool.class).getResource()) {
# 	jedis.xxx
#	jedis.xxx
# }

redis.host=localhost
redis.port=6379
redis.password=

redis.maxIdle=2
redis.maxTotal=20
redis.timeout=2000


# ZAsyncProperties 
# -------------------异步处理的相关配置-------------------
# 配置 @ZAsync 注解使用的线程池相关信息 

# 配置线程池中最大线程数
# private static final int MIN = 10;
# 默认值：Math.min(MIN, Runtime.getRuntime().availableProcessors())
# 即：最小为10
async.thread.count=10

# 线程名称前缀
# 默认值：zasync-Thread-
async.thread.name.prefix=async-Thread-


# ZControllerAdviceThrowableConfigurationProperties 
# -------------------API异常捕捉器的相关配置-------------------

# API执行出现异常时，返回给客户端的错误码，是响应体的错误码，
# 不是http状态码
# 默认值：50000
controller.advice.error.code=50000


# ZRequestMappingConfigurationProperties 
# -------------------@ZRequestMapping的相关配置-------------------

# @ZRequestMapping 直接的默认qps，默认值：50000
request.mapping.qps=50000


# RequestValidatorConfigurationProperties
# -------------------默认请求处理器的相关配置-------------------

# 平滑处理的User-Agent
# 判断逻辑：请求头中User-Agent包含如下任一内容就进行平滑处理，区分大小写
# 默认值：Sets.newHashSet("Safari", "Chrome", "Firefox","Edge", "Edg", "Opera", "OPR")
request.smooth.user.agent[0]=Safari
request.smooth.user.agent[1]=Chrome
request.smooth.user.agent[2]=Firefox
request.smooth.user.agent[3]=Edge
request.smooth.user.agent[4]=Edg
request.smooth.user.agent[5]=Opera
request.smooth.user.agent[6]=OPR

# 是否打印(LOG.debug)http请求内容
# 默认值：false
request.print.http=false
